name: 'Terraform'

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      tf-path:
        required: true
        type: string
    secrets:
      TF_API_TOKEN:
        required: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ inputs.tf-path }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ inputs.tf-path }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var "environment=${{ inputs.env }}"
      working-directory: ${{ inputs.tf-path }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Outputs
      run: |
        terraform output -json
        terraform output -raw resource_group_id 
        terraform output -raw app_service_hostname
        # $outputs = terraform output -json
        # Write-Host $outputs
        # $outputsJson = $outputs | ConvertFrom-Json
        # Write-Host $outputsJson
      # shell: pwsh
      working-directory: ${{ inputs.tf-path }}
