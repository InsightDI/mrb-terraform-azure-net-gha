name: 'Terraform Provisioning'

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      tf-path:
        required: true
        type: string
      output-vars:
        required: false
        type: string
    secrets:
      TF_API_TOKEN:
        required: true
    outputs:
      resource_group_id:
        description: "Resource group Id"
        value: ${{ jobs.terraform-outputs.outputs.resource_group_id }}
      app_service_hostname:
        description: "Web app hostname"
        value: ${{ jobs.terraform-outputs.outputs.app_service_hostname }}
      eshop_web_service:
        description: "Web app service name"
        value: ${{ jobs.terraform-outputs.outputs.eshop_web_service }}
      eshop_api:
        description: "API service name"
        value: ${{ jobs.terraform-outputs.outputs.eshop_api }}

jobs:
  tf-lint:
    name: 'TF Lint'
    if: ${{ inputs.env == 'dev' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    continue-on-error: true

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup TF Lint
        uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest

      - name: Init TFLint
        run: tflint --init
        working-directory: ${{ inputs.tf-path }}

      - name: Run TFLint
        run: tflint --var="environment=${{ inputs.env }}" -f json
        working-directory: ${{ inputs.tf-path }}


  terraform:
    name: 'Terraform Provisioning'
    if: ${{ always() }}
    needs: tf-lint
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Replace Tokens - providers.tf
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["infra/terraform/providers.tf"]'
      env:
        environment: ${{ inputs.env }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Plan
      run: terraform plan -var "environment=${{ inputs.env }}"
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Apply
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -var "environment=${{ inputs.env }}" -auto-approve
      working-directory: ${{ inputs.tf-path }} 

  terraform-outputs:
    needs: terraform
    name: 'Terraform Provisioning - Outputs'
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    defaults:
      run:
        shell: bash

    outputs:
      resource_group_id: ${{ steps.tf_outputs.outputs.resource_group_id }}
      app_service_hostname: ${{ steps.tf_outputs.outputs.app_service_hostname }}
      eshop_web_service: ${{ steps.tf_outputs.outputs.eshop_web_service }}
      eshop_api: ${{ steps.tf_outputs.outputs.eshop_api }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Replace Tokens - providers.tf
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["infra/terraform/providers.tf"]'
      env:
        environment: ${{ inputs.env }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Outputs
      id: tf_outputs
      run: ${{ inputs.output-vars }}
      working-directory: ${{ inputs.tf-path }}
